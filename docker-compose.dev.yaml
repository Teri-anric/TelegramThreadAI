services:
  db:
    image: postgres:16.1
    env_file:
      - .env.dev
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-ttai_password}
      - POSTGRES_USER=${DATABASE_USER:-ttai_user}
      - POSTGRES_DB=${DATABASE_NAME:-ttai_db}
      - POSTGRES_PORT=${DATABASE_PORT:-5432}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-ttai_user} -d ${DATABASE_NAME:-ttai_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  backend-dev:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file:
      - .env.dev
    command: uvicorn app.web:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
        - action: rebuild
          path: ./backend/requirements.txt
  
  bot-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file:
      - .env.dev
    command: python -m app.bot
    volumes:
      - ./backend/app:/app/app
    depends_on:
      db:
        condition: service_healthy
  
  frontend-dev:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    env_file:
      - .env.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend-dev
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src
        - action: rebuild
          path: ./frontend/package.json

  rabbitmq:
    image: rabbitmq:4.0-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend_network

volumes:
  pg_data:
  rabbitmq_data:

networks:
  backend_network:
    driver: bridge 